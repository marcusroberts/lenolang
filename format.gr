module Format

from "./tokenizer.gr" include Tokenizer
from "./parser.gr" include Parser
from "./analyse.gr" include Analyze

from "./doc.gr" include Doc

from "list" include List

use Parser.{ type PExpression, type PStatement }
use Tokenizer.{ type Location }

use Doc.{ (++) }

let rec print_statement = (stmt: PStatement) => {
  match (stmt.statement) {
    NullStatement => Doc.empty,
    ExpressionStatement(expr) => print_expression(expr),
    PrintStatement(expr) => print_print(expr),
    PAssign(name, expr) => print_assign(name, expr),
  }
}
and print_expression = (expr: PExpression) => {
  match (expr) {
    PNull{ _ } => Doc.empty,
    PNumber{ number, _ } => Doc.string(toString(number)),
    PString{ string, _ } =>
      Doc.string("\"") ++ Doc.string(string) ++ Doc.string("\""),
    PVariable{ name, _ } => Doc.string(name),
    PFunction{ arg, body, _ } =>
      Doc.parens(Doc.string(arg)) ++
        Doc.space ++
        Doc.string("=>") ++
        Doc.space ++
        print_expression(body),
    PBlock{ statements, loc } => {
      let stmts = List.map(s => print_statement(s), statements)
      Doc.braces(
        Doc.concat_map(
          (f, s) => Doc.empty,
          a => Doc.empty,
          b => Doc.empty,
          (f, n) =>
            if (f)
              n ++ Doc.string(";")
            else
              n ++ Doc.string(";") ++ Doc.hardline,
          stmts
        )
      )
    },
    BinaryExpression{ operator, left, right, _ } =>
      print_expression(left) ++
        Doc.space ++
        Doc.string(operator) ++
        Doc.space ++
        print_expression(right),
    //UnaryExpression{ expression: PExpression, loc: Tokenizer.Location },
    PApp{ operator, value, _ } =>
      Doc.string(operator) ++ Doc.parens(print_expression(value)),
  }
}
and print_print = (expr: PExpression) => {
  Doc.string("print ") ++ Doc.parens(print_expression(expr))
}
and print_assign = (name: String, expr: PExpression) => {
  Doc.string("let") ++
    Doc.space ++
    Doc.string(name) ++
    Doc.space ++
    Doc.string("=") ++
    Doc.space ++
    print_expression(expr)
}

provide let format = (src: String) => {
  // (fail "unimplemented"): String

  let ast = Parser.parse(src)

  let stmts = List.map(stmt => print_statement(stmt), ast.statements)

  let joined = Doc.concat_map(
    (f, s) => Doc.empty, //Doc.string("x") ++ Doc.hardline,
    a => Doc.empty,
    b => Doc.empty,
    (f, n) =>
      n ++
        Doc.string(";") ++
        Doc.hardline ++
        (if (!f) Doc.hardline else Doc.empty),
    stmts
  )

  Doc.Engine.to_string(Doc.LF, 80, joined)
}
