module Parser

from "./tokenizer.gr" include Tokenizer
from "option" include Option
from "number" include Number
from "list" include List
from "string" include String

provide exception SyntaxError(String)

let opPrec = (tokType: Tokenizer.TokenType) => {
  match (tokType) {
    Multiplication => 3,
    Division => 3,
    Addition => 2,
    Subtraction => 2,
    _ => 0,
  }
}

let getPrecedence = (
  tokenOpt: Option<((Tokenizer.TokenType, String), Tokenizer.Location)>,
) => {
  match (tokenOpt) {
    None => 0,
    Some(((t, _), location)) => opPrec(t),
  }
}

provide enum rec PExpression {
  PNull{ loc: Tokenizer.Location, },
  PNumber{ number: Number, loc: Tokenizer.Location },
  PString{ string: String, loc: Tokenizer.Location },
  PVariable{ name: String, loc: Tokenizer.Location },
  PFunction{ arg: String, body: PExpression, loc: Tokenizer.Location },
  PBlock{ statements: List<PStatement>, loc: Tokenizer.Location },
  BinaryExpression{
    operator: String,
    left: PExpression,
    right: PExpression,
    loc: Tokenizer.Location,
  },
  //UnaryExpression{ expression: PExpression, loc: Tokenizer.Location },
  PApp{ operator: String, value: PExpression, loc: Tokenizer.Location },
}
and provide enum Statement {
  NullStatement,
  ExpressionStatement(PExpression),
  PrintStatement(PExpression),
  PAssign(String, PExpression),
}
and provide record PStatement {
  statement: Statement,
  location: Tokenizer.Location,
}

provide record Program {
  statements: List<PStatement>,
}

let mut input = ""
let mut lookahead = None

let eat = tokenType => {
  let token = lookahead
  match (token) {
    None => {
      throw SyntaxError(
        "Unexpected end of input, expected " ++
          Tokenizer.tokenTypeToString(tokenType),
      )
    },
    Some(((t, str), location)) => {
      if (t != tokenType) {
        print(
          "Unexpected token, expected " ++
            Tokenizer.tokenTypeToString(tokenType)
        )
        print(token)

        throw SyntaxError(
          "Unexpected token, expected to find " ++
            Tokenizer.tokenTypeToString(tokenType),
        )
      }
      // Advance to the next token
      lookahead = Tokenizer.getNextToken()
      return (t, str)
    },
  }
}

let getExpressionLocation = (expression: PExpression) => {
  match (expression) {
    PNull{ loc } => loc,
    PNumber{ loc, _ } => loc,
    PString{ loc, _ } => loc,
    PVariable{ loc, _ } => loc,
    PFunction{ loc, _ } => loc,
    BinaryExpression{ loc, _ } => loc,
    PApp{ loc, _ } => loc,
  }
}
let isBlock = e => match (e) {
  PBlock{ _ } => true,
  _ => false,
}

let rec parenthesizedExpression = () => {
  eat(Tokenizer.Parens_Left)
  let expression1 = expression(0)
  eat(Tokenizer.Parens_Right)
  expression1 // add the parens to the locations
}
and functionDeclaration = (arg, location) => {
  eat(Tokenizer.FatArrow)
  match (arg) {
    PVariable{ name, loc } => {
      let body = expression(0)
      PFunction{ arg: name, body, loc: location } // FIX location
    },
    _ => {
      throw SyntaxError("Function argument isn't an identifier")
    },
  }
}
and blockStatement = () => {
  eat(Tokenizer.Bracket_Left)

  let mut stmtList = [statement()]

  while (Option.isSome(lookahead)) {
    let ((ttype, _), _) = Option.unwrap(lookahead)

    if (ttype == Tokenizer.Bracket_Right) break

    stmtList = List.append(stmtList, [statement()])
  }

  eat(Tokenizer.Bracket_Right)

  PBlock{ statements: stmtList, loc: Tokenizer.emptyLocation() }
}
and parenthesizedExpressionOrFunctionDeclaration = () => {
  eat(Tokenizer.Parens_Left)
  let expression1 = expression(0)
  eat(Tokenizer.Parens_Right)

  match (lookahead) {
    None => expression1,
    Some(((ttype, _), location)) => match (ttype) {
      FatArrow => {
        functionDeclaration(expression1, location)
      },
      _ => expression1,
    },
  }
}
and function = (id, value: PExpression) => {
  PApp{ operator: id, value, loc: Tokenizer.emptyLocation() } // FIX
}
and functionExpression = () => {
  let (t, val) = eat(Tokenizer.Identifier)
  let id = val
  let expression = parenthesizedExpression()
  function(id, expression)
}
and prefix = () => {
  print("prefix")
  print(lookahead)
  match (lookahead) {
    Some(((lat, _), location)) => match (lat) {
      Bracket_Left => return blockStatement(),
      Parens_Left => return parenthesizedExpressionOrFunctionDeclaration(),
      Identifier => return variableOrFunctionExpression(),
      TString => {
        let (_t, str) = eat(Tokenizer.TString)
        // trim off the quotes around the string

        let cleanString = String.replaceAll("\"", "", str)
        return PString{ string: cleanString, loc: location }
      },
      Number => {
        let (t, str) = eat(Tokenizer.Number)
        let res = Number.parseInt(str, 10)
        return match (res) {
          Ok(num) => return PNumber{ number: num, loc: location },
          Err(_) => throw SyntaxError("Number wasn't a number"),
        }
      },
      _ => void,
    },
    _ => void,
  }

  throw SyntaxError("Unexpected prefix value")
}
and infix = (left: PExpression, operatorType) => {
  let operatatorLocation = match (lookahead) {
    None => Tokenizer.emptyLocation(),
    Some((_, location)) => location,
  }

  let (ttype, _) = eat(operatorType)
  let newPrec = opPrec(ttype)

  match (ttype) {
    Addition =>
      BinaryExpression{
        operator: "+",
        left,
        right: expression(newPrec),
        loc: operatatorLocation
      },
    Subtraction =>
      BinaryExpression{
        operator: "-",
        left,
        right: expression(newPrec),
        loc: operatatorLocation
      },
    Multiplication =>
      BinaryExpression{
        operator: "*",
        left,
        right: expression(newPrec),
        loc: operatatorLocation
      },
    Division =>
      BinaryExpression{
        operator: "/",
        left,
        right: expression(newPrec),
        loc: operatatorLocation
      },
    _ => PNull{ loc: Tokenizer.emptyLocation() },
  }
}
and expression = prec => {
  let mut left = prefix()

  while (prec < getPrecedence(lookahead)) {
    match (lookahead) {
      None => void,
      Some(((t, _), location)) => left = infix(left, t),
    }
  }

  left
}
and variable = (id, location) => {
  PVariable{ name: id, loc: location }
}
and variableOrFunctionExpression = () => {
  let (_, id) = eat(Identifier)
  match (lookahead) {
    None => PNull{ loc: Tokenizer.emptyLocation() },
    Some(((t, _), location)) => match (t) {
      Parens_Left => functionExpression(),
      _ => variable(id, location),
    },
  }
}
and expressionStatement = startLocation => {
  let expr = expression(0)

  // semicolon should be optional after a blockStatement

  match (expr) {
    PBlock{ _ } => {
      match (lookahead) {
        Some(((t, _), location)) => match (t) {
          Tokenizer.Semicolon => {
            let _ = eat(Semicolon)
          },
          _ => void,
        },
        None => void,
      }
    },
    _ => {
      let _ = eat(Semicolon)
    },
  }
  expr
}
and printStatement = startLocation => {
  let _ = eat(Print)
  let expr = parenthesizedExpression()
  let _ = eat(Semicolon)

  let locatedStatement: PStatement = {
    statement: PrintStatement(expr),
    location: startLocation,
  }
  locatedStatement
}
and variableStatement = (startLocation: Tokenizer.Location) => {
  let _ = eat(Variable)
  let (t, name) = eat(Identifier)
  let _ = eat(Assignment)
  let value = expression(0)

  //let _ = eat(Semicolon)

  match (value) {
    PBlock{ _ } => match (lookahead) {
      Some(((t, _), location)) => match (t) {
        Tokenizer.Semicolon => {
          let _ = eat(Semicolon)
        },
        _ => void,
      },
      None => void,
    },
    PFunction{ body, _ } when isBlock(body) => {
      match (lookahead) {
        Some(((t, _), location)) => match (t) {
          Tokenizer.Semicolon => {
            let _ = eat(Semicolon)
          },
          _ => void,
        },
        None => void,
      }
    },
    _ => {
      let _ = eat(Semicolon)
    },
  }

  let exprLoc = getExpressionLocation(value)

  let statementLocation: Tokenizer.Location = {
    startLine: startLocation.startLine,
    startChar: startLocation.startChar,
    endLine: exprLoc.endLine,
    endChar: exprLoc.endChar,
  }

  let locatedStatement: PStatement = {
    statement: PAssign(name, value),
    location: statementLocation,
  }
  locatedStatement
}
and statement = () => {
  match (lookahead) {
    None => {
      let locatedStatement: PStatement = {
        statement: NullStatement,
        location: Tokenizer.emptyLocation(),
      }
      locatedStatement
    },
    Some(((t, _), location)) => {
      print("line starting location")
      print(location)
      match (t) {
        Print => printStatement(location),
        Variable => variableStatement(location),
        _ => {
          let locatedStatement: PStatement = {
            statement: ExpressionStatement(expressionStatement(location)),
            location,
          }
          locatedStatement
        },
      }
    },
  }
}
and statementList = () => {
  let mut stmtList = [statement()]

  while (Option.isSome(lookahead)) {
    stmtList = List.append(stmtList, [statement()])
  }

  return stmtList
}
and program = () => {
  let result: Program = {
    { statements: statementList(), }
  }
  result
}

provide let parse = (source: String) => {
  input = source

  Tokenizer.init(source)

  lookahead = Tokenizer.getNextToken()

  program()
}
